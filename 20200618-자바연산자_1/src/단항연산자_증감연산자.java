/*
	1. 연산자
		1) 연산자의 종류
			= 단항연산자
				= ****증감연산자 (++, --)
				= ****부정연산자 (!)
				= 부호연산자 (+, -)
				= ****형변환연산자 ((type))
					type ==> int, byte, char, double, long, float...
					(int)
					(byte)
					(char)
					(double)
					(long)
					==> 데이터형을 변경해서 연산처리 가능하게 만든다.
						(연산  : 데이터형이 동일해야 함)
						
			= 이항연산자
				= ****산술연산자(+,-,*,/,%) ==> 형변환이 이뤄지는 과정 주의!
					/ 
					  ==> 0으로 나눌 수가 없다.
					  ==> (정수/정수)=(정수) : 정수와 정수를 나누면 정수
					  ==> (정수/실수)=(실수) : 소수점까지 구하고 싶으면 실수로 형변환해서 나눠야 함
					% 
					  ==> 나머지 값
					  ==> 5%2 (1) 
					  ==> 배수 구할 때 많이 씀(3의배수는 3으로 나눴을 때 나머지 0인 값들)
					  ==> 왼쪽편의 부호를 따름
					  ==> 5%-2 (1)
					  ==> -5%2 (-1) 
					  ==> -5%-2 (-1)
				= 비트연산자 (&, | , ^)
				= 쉬프트연산자 (<<, >>)
				= ****비교연산자 (==, !=, <, >, <=, >=)
				= ****논리연산자 (&&, ||)
				= ****대입연산자 (=, +=, -= ...)
			
			= 삼항연산자
				= 조건 ? 값1:값2
					조건 : true  ==> 값1
					조건 : false ==> 값2
			
		2) 연산 방법
			단항연산자
				= 증감연산자							==> ++a ==> a=a+1 ==> 메모리에 자동 저장
					++ : 무조건 1개를 증가한다 
					-- : 무조건 1개를 감소한다
					사용법
						int a = 10; ---- 변수선언
						++10		---- (x)
						++a(--a)	---- 전치연산자 ==> 증가한 다음에 대입
													 int a=10;
													 int b=++a;
													 a=11
													 b=11						
						
						a++(a--)	---- 후치연산자 ==> 대입을 먼저하고 나중에 증가
													 int a=10;
													 int b=a++;
													 a=11
													 b=10
						
						===========================> 반복문, 게임로직을 사용할 때 많이 사용
													ex) for (int i=1; i<=10; i++)
						
				= 부정연산자 (true => false, false => true) ==> !
					====== 반드시 boolean을 사용한다.
					
					예) 
						boolean bCheck=false;
						!bCheck 							---- 자동으로 메모리 저장되지 않음 (자동으로 저장되는 건 증감연산자뿐!)
						system.out.println(bCheck) ==> false
						bCheck = !bCheck 					---- 바뀐값을 메모리에 저장
						system.out.println(bCheck) ==> true
				
		3) 연산자 우선순위



 */
public class 단항연산자_증감연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 전치연산
		int a= 10;
		int b=++a;
		System.out.println("a="+a+",b="+b);
		
		// 후치연산
		a= 10;		    // int a로 정의하면 안됨 ==> 변수 선언 중복
		b= a++;			// int b로 정의하면 안됨 ==> 변수 선언 중복
		System.out.println("a="+a+",b="+b);
		
		// 전치연산의 더하기
		a=10;
		b=++a + ++a + ++a + ++a;
		// 11	12	   13	14
		System.out.println("a="+a+",b="+b);

		// 후치연산의 더하기
		a=10;
		b=a++ + a++ + a++ + a++;
		// 10	11	  12    13
		System.out.println("a="+a+",b="+b);
		
	}

}
