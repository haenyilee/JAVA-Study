/*
 	<클래스의 구성요소>
 	=============
 		멤버변수
 		생성자
 		메소드
 	=============
 	
 	<객체지향의 3대 요소>
 		= 데이터를 보호 (데이터를 사용하지 못하게 만드는 작업 : 은닉화
 					 클래스간와 클래스의 연결을 시키는 작업 => 감춘 데이터를 메소드를 통해서 접근이 가능하게 만들어줌 : 캡슐화)
 		
	 		= 접근 지정어 필요
	 			private
	 			protected
	 			public
	 			default
	 			
	 		= 재사용 기법
	 			= 상속 ==> is-a
	 			= 포함 ==> has-a
	 		
	 		= 수정, 추가
	 			= 다형성
	 				= 오버로딩 : 새로운 기능 추가 new
	 				= 오버라이딩 : 기존에 있던 기능을 수정할 때 modify 
	==================================================================== 
	==> 유지보수를 쉽게 만드는 기법
		==> 실행속도가 늦어짐 (객체지향)
	================================== POJO (Spring) 기법으로 보완...?
	*** 객체지향 문법 사항에 연연하지 않기!
	
	
	1) 접근지정어
	======================================================================================================================================== 
				같은 클래스 내		같은 폴더			다른 폴더			모든 클래스
								(패키지)		(상속을 받는 경우)		
	========================================================================================================================================
	public			O			  O				  O				   O	 	
	========================================================================================================================================
	protected		O			  O				  O				   X
	========================================================================================================================================
	default			O			  O				  X				   X
	========================================================================================================================================
	private			O			  X				  X				   X
	========================================================================================================================================
	
	<<접근 범위 크기>>
	public > protected > default > private
	
	1) public : 전체공개 => 어떤 위치든 상관없이 사용이 가능
		예) public int age;
	2) protected : 상속을 받았을 때 하위클래스에서 사용이 가능
		예) protected String name;
			[상속에서 예외 조건]
			===============
			1. static => 사용만 가능할 뿐 상속x
			2. private => 상속이 내려가는데 사용이 불가
			3. 생성자 => 상속이 되지 않는다.
	3) default : 같은 패키지 안에서만 사용이 가능 => src
		예) String name;
			
	<<사용방식>>
		멤버변수  ==> 다른 클래스에서 값을 변경할 수 없게 은닉화 => private
		====== 	
		메소드
		생성자 
		====== 다른 클래스와 연결해서 프로그램이 동작 => public
		
	4) private : 자신의 클래스에서만 사용이 가능 => 비공개
				 => 다른 클래스에서도 사용이 가능 => 메소드를 통해서 접근이 가능하게 만든다.
				 
	=======================================================================
	1. 데이터 보호 : 값이 프로그램과 관련없이 변질 , 값 변경될 수 있다
				 => 캡슐화
				 	=====
				 	1) 데이터를 보호하는 목적
				 	      데이터은닉화(데이터를 감춰놓고 필요할 때만 메소드를 이용해 가져다 쓰는 것)
				 	2) 경계구분
	 				
	
 */
public class 캡슐화 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
